name: Build DevForge

on:
  push:
    branches: [ main, release/*, github-workflow ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: false

      - name: Configure Git to ignore submodules
        run: |
          git config --global submodule.fetch-mcp.update none
        shell: pwsh

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Create .npmrc file
        run: |
          # Create .npmrc file with proper electron settings and authentication tokens
          @"
          disturl="https://electronjs.org/headers"
          target="34.3.2"
          ms_build_id="11161073"
          runtime="electron"
          build_from_source="true"
          legacy-peer-deps="true"
          timeout=180000
          @microsoft:registry=https://npm.pkg.github.com
          @vscode:registry=https://npm.pkg.github.com
          //npm.pkg.github.com/:_authToken=${{ github.token }}
          //github.com/:_authToken=${{ github.token }}
          //api.github.com/:_authToken=${{ github.token }}
          fetch-timeout=300000
          fetch-retry-mintimeout=20000
          fetch-retry-maxtimeout=120000
          "@ | Out-File -FilePath .npmrc -Encoding utf8

          # Display the content of the .npmrc file for verification
          Get-Content .npmrc
        shell: pwsh

      - name: Direct fix for electron.js
        run: |
          # Create the parent directory if it doesn't exist
          if (-not (Test-Path -Path "build/lib")) {
            New-Item -Path "build/lib" -ItemType Directory -Force
          }

          # Add hard-coded values directly to electron.js
          @"
          // Hardcoded electron version values
          const electronVersion = '34.3.2';
          const msBuildId = '11161073';

          // Export these values
          module.exports = {
            getElectronVersion: function() {
              return { electronVersion, msBuildId };
            },
            version: electronVersion
          };
          "@ | Out-File -FilePath "build\lib\electron-version-hardcoded.js" -Encoding utf8

          # Check if electron.js exists and patch it
          $electronJsPath = "build\lib\electron.js"
          if (Test-Path $electronJsPath) {
            $content = Get-Content -Path $electronJsPath -Raw
            if ($content -match "util.getElectronVersion") {
              $fixedContent = $content -replace "const \{ electronVersion, msBuildId \} = util\.getElectronVersion\(\);", "const electronVersion = '34.3.2'; const msBuildId = '11161073';"
              $fixedContent | Out-File -FilePath $electronJsPath -Encoding utf8
              Write-Host "Successfully patched electron.js to use hardcoded values"
            }
          }
        shell: pwsh

      - name: Create empty fetch-mcp directory
        run: |
          if (-not (Test-Path -Path "fetch-mcp")) {
            New-Item -Path "fetch-mcp" -ItemType Directory -Force
          }
        shell: pwsh

      - name: Install dependencies
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          npm install
          npm install -g node-gyp
          npm install -g gulp-cli
        shell: cmd

      - name: Build React Components
        run: npm run buildreact
        shell: cmd

      - name: Build Electron App
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: npm run gulp vscode-win32-x64-min
        shell: cmd

      - name: Package
        run: |
          mkdir -p .build/win32-x64
          Compress-Archive -Path ..\VSCode-win32-x64\* -DestinationPath .build\win32-x64\devforge-win32-x64.zip
        shell: pwsh

      - name: Generate checksum
        run: |
          cd .build/win32-x64
          $hash = Get-FileHash -Algorithm SHA256 devforge-win32-x64.zip
          $hash.Hash | Out-File -Encoding ascii devforge-win32-x64.zip.sha256
        shell: pwsh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: devforge-win32-x64
          path: |
            .build/win32-x64/devforge-win32-x64.zip
            .build/win32-x64/devforge-win32-x64.zip.sha256

  build-windows-arm64:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: false

      - name: Configure Git to ignore submodules
        run: |
          git config --global submodule.fetch-mcp.update none
        shell: pwsh

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Create .npmrc file
        run: |
          # Create .npmrc file with proper electron settings and authentication tokens
          @"
          disturl="https://electronjs.org/headers"
          target="34.3.2"
          ms_build_id="11161073"
          runtime="electron"
          build_from_source="true"
          legacy-peer-deps="true"
          timeout=180000
          @microsoft:registry=https://npm.pkg.github.com
          @vscode:registry=https://npm.pkg.github.com
          //npm.pkg.github.com/:_authToken=${{ github.token }}
          //github.com/:_authToken=${{ github.token }}
          //api.github.com/:_authToken=${{ github.token }}
          fetch-timeout=300000
          fetch-retry-mintimeout=20000
          fetch-retry-maxtimeout=120000
          "@ | Out-File -FilePath .npmrc -Encoding utf8

          # Display the content of the .npmrc file for verification
          Get-Content .npmrc
        shell: pwsh

      - name: Direct fix for electron.js
        run: |
          # Create the parent directory if it doesn't exist
          if (-not (Test-Path -Path "build/lib")) {
            New-Item -Path "build/lib" -ItemType Directory -Force
          }

          # Add hard-coded values directly to electron.js
          @"
          // Hardcoded electron version values
          const electronVersion = '34.3.2';
          const msBuildId = '11161073';

          // Export these values
          module.exports = {
            getElectronVersion: function() {
              return { electronVersion, msBuildId };
            },
            version: electronVersion
          };
          "@ | Out-File -FilePath "build\lib\electron-version-hardcoded.js" -Encoding utf8

          # Check if electron.js exists and patch it
          $electronJsPath = "build\lib\electron.js"
          if (Test-Path $electronJsPath) {
            $content = Get-Content -Path $electronJsPath -Raw
            if ($content -match "util.getElectronVersion") {
              $fixedContent = $content -replace "const \{ electronVersion, msBuildId \} = util\.getElectronVersion\(\);", "const electronVersion = '34.3.2'; const msBuildId = '11161073';"
              $fixedContent | Out-File -FilePath $electronJsPath -Encoding utf8
              Write-Host "Successfully patched electron.js to use hardcoded values"
            }
          }
        shell: pwsh

      - name: Create empty fetch-mcp directory
        run: |
          if (-not (Test-Path -Path "fetch-mcp")) {
            New-Item -Path "fetch-mcp" -ItemType Directory -Force
          }
        shell: pwsh

      - name: Install dependencies
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          npm install
          npm install -g node-gyp
          npm install -g gulp-cli
        shell: cmd

      - name: Build React Components
        run: npm run buildreact
        shell: cmd

      - name: Build Electron App
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: npm run gulp vscode-win32-arm64-min
        shell: cmd

      - name: Package
        run: |
          mkdir -p .build/win32-arm64
          Compress-Archive -Path ..\VSCode-win32-arm64\* -DestinationPath .build\win32-arm64\devforge-win32-arm64.zip
        shell: pwsh

      - name: Generate checksum
        run: |
          cd .build/win32-arm64
          $hash = Get-FileHash -Algorithm SHA256 devforge-win32-arm64.zip
          $hash.Hash | Out-File -Encoding ascii devforge-win32-arm64.zip.sha256
        shell: pwsh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: devforge-win32-arm64
          path: |
            .build/win32-arm64/devforge-win32-arm64.zip
            .build/win32-arm64/devforge-win32-arm64.zip.sha256

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: false

      - name: Configure Git to ignore submodules
        run: |
          git config --global submodule.fetch-mcp.update none

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libx11-dev libxkbfile-dev libsecret-1-dev libkrb5-dev
          # Create .npmrc file with authentication tokens
          echo "//github.com/:_authToken=${{ github.token }}" > .npmrc
          echo "//api.github.com/:_authToken=${{ github.token }}" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ github.token }}" >> .npmrc
          echo "@microsoft:registry=https://npm.pkg.github.com" >> .npmrc
          echo "@vscode:registry=https://npm.pkg.github.com" >> .npmrc
          echo "fetch-timeout=300000" >> .npmrc
          echo "fetch-retry-mintimeout=20000" >> .npmrc
          echo "fetch-retry-maxtimeout=120000" >> .npmrc
          # Verify existing .npmrc file has electron settings
          if ! grep -q "target=" .npmrc; then
            echo 'disturl="https://electronjs.org/headers"' >> .npmrc
            echo 'target="34.3.2"' >> .npmrc
            echo 'ms_build_id="11161073"' >> .npmrc
            echo 'runtime="electron"' >> .npmrc
            echo 'build_from_source="true"' >> .npmrc
          fi
          npm install
          npm install -g node-gyp
          npm install -g gulp-cli
      - name: Direct fix for electron.js
        run: |
          # Create parent directory if it doesn't exist
          mkdir -p build/lib

          # Add hard-coded values directly to a module
          cat > build/lib/electron-version-hardcoded.js << 'EOF'
          // Hardcoded electron version values
          const electronVersion = '34.3.2';
          const msBuildId = '11161073';

          // Export these values
          module.exports = {
            getElectronVersion: function() {
              return { electronVersion, msBuildId };
            },
            version: electronVersion
          };
          EOF

          # Check if electron.js exists and patch it
          if [ -f "build/lib/electron.js" ]; then
            sed -i 's/const { electronVersion, msBuildId } = util.getElectronVersion();/const electronVersion = "34.3.2"; const msBuildId = "11161073";/' build/lib/electron.js
            echo "Successfully patched electron.js"
          fi

      - name: Build
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          npm run buildreact
          npm run gulp vscode-linux-x64-min
      - name: Package
        run: |
          mkdir -p .build/linux/client
          ARCHIVE_PATH=".build/linux/client/devforge-linux-x64.tar.gz"
          tar -czf $ARCHIVE_PATH -C .. VSCode-linux-x64
      - name: Generate checksum
        run: |
          cd .build/linux/client
          sha256sum devforge-linux-x64.tar.gz > devforge-linux-x64.tar.gz.sha256
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: devforge-linux-x64
          path: |
            .build/linux/client/devforge-linux-x64.tar.gz
            .build/linux/client/devforge-linux-x64.tar.gz.sha256

  build-linux-arm64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: false

      - name: Configure Git to ignore submodules
        run: |
          git config --global submodule.fetch-mcp.update none

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libx11-dev libxkbfile-dev libsecret-1-dev libkrb5-dev
          # Create .npmrc file with authentication tokens
          echo "//github.com/:_authToken=${{ github.token }}" > .npmrc
          echo "//api.github.com/:_authToken=${{ github.token }}" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ github.token }}" >> .npmrc
          echo "@microsoft:registry=https://npm.pkg.github.com" >> .npmrc
          echo "@vscode:registry=https://npm.pkg.github.com" >> .npmrc
          echo "fetch-timeout=300000" >> .npmrc
          echo "fetch-retry-mintimeout=20000" >> .npmrc
          echo "fetch-retry-maxtimeout=120000" >> .npmrc
          # Verify existing .npmrc file has electron settings
          if ! grep -q "target=" .npmrc; then
            echo 'disturl="https://electronjs.org/headers"' >> .npmrc
            echo 'target="34.3.2"' >> .npmrc
            echo 'ms_build_id="11161073"' >> .npmrc
            echo 'runtime="electron"' >> .npmrc
            echo 'build_from_source="true"' >> .npmrc
          fi
          npm install
          npm install -g node-gyp
          npm install -g gulp-cli
      - name: Direct fix for electron.js
        run: |
          # Create parent directory if it doesn't exist
          mkdir -p build/lib

          # Add hard-coded values directly to a module
          cat > build/lib/electron-version-hardcoded.js << 'EOF'
          // Hardcoded electron version values
          const electronVersion = '34.3.2';
          const msBuildId = '11161073';

          // Export these values
          module.exports = {
            getElectronVersion: function() {
              return { electronVersion, msBuildId };
            },
            version: electronVersion
          };
          EOF

          # Check if electron.js exists and patch it
          if [ -f "build/lib/electron.js" ]; then
            sed -i 's/const { electronVersion, msBuildId } = util.getElectronVersion();/const electronVersion = "34.3.2"; const msBuildId = "11161073";/' build/lib/electron.js
            echo "Successfully patched electron.js"
          fi

      - name: Build
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          npm run buildreact
          npm run gulp vscode-linux-arm64-min
      - name: Package
        run: |
          mkdir -p .build/linux/client
          ARCHIVE_PATH=".build/linux/client/devforge-linux-arm64.tar.gz"
          tar -czf $ARCHIVE_PATH -C .. VSCode-linux-arm64
      - name: Generate checksum
        run: |
          cd .build/linux/client
          sha256sum devforge-linux-arm64.tar.gz > devforge-linux-arm64.tar.gz.sha256
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: devforge-linux-arm64
          path: |
            .build/linux/client/devforge-linux-arm64.tar.gz
            .build/linux/client/devforge-linux-arm64.tar.gz.sha256

